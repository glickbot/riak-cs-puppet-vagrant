#!/usr/bin/env ruby

require 'json'
require 'net/http'

nodepre = 'riak@'
address = "<%= scope.lookupvar('profile::riak::riak_kv::riak_address') %>"
port = "<%= scope.lookupvar('profile::riak::riak_kv::riak_http_port') %>"
url = URI("http://#{address}:#{port}/stats")
defined_hostnames = <%= scope.lookupvar('profile::riak::cluster::cluster_node_list') %>
defined_nodenames = defined_hostnames.collect {|h| nodepre + h }
primary_node = "<%= scope.lookupvar('profile::riak::cluster::riak_hostname_first') %>"
#hostname_pat = /\{'[^'@]*@([^']*)',[0-9]+\}/
nodename_pat = /\{'([^']*)',[0-9]+\}/

begin
  json = Net::HTTP.get(url)
rescue StandardError => e
  abort("Error fetching #{url}: #{e.inspect}")
end
stats = JSON.parse(json)


#valid_hostnames = stats['ring_ownership'].scan(hostname_pat).flatten
valid_nodenames = stats['ring_ownership'].scan(nodename_pat).flatten
joined_nodenames = stats['ring_members']

def return_res(result)
  if result then
    puts "true"
    exit
  else
    puts "false"
    exit 1
  end
end

case ARGV[0]
when "all_defined_are_valid"
  return_res (defined_nodenames - valid_nodenames).length == 0
when "all_defined_have_joined"
  return_res (defined_nodenames - joined_nodenames).length == 0
when "all_joined_are_valid"
  return_res (joined_nodenames - valid_nodenames).length == 0
when "is_in_correct_cluster"
  return_res joined_nodenames.grep(/^#{primary_node}$/i).count == 1
when "is_only_member_in_cluster"
  return_res joined_nodenames.length == 1
when "debug"
  puts "defined_hostnames: #{defined_hostnames.inspect}"
  puts "defined_nodenames: #{defined_nodenames.inspect}"
  puts "valid_nodenames: #{valid_nodenames.inspect}"
  puts "joined_nodenames: #{joined_nodenames.inspect}"
  puts "defined - valid: " + (defined_nodenames - valid_nodenames).inspect
  puts "defined - joined: " + (defined_nodenames - joined_nodenames).inspect
  puts "joined - valid: " + (joined_nodenames - valid_nodenames).inspect
else
  abort("Invalid command: \"#{ARGV[0]}\"")
end